Description: csye6225 Infrastructure as Code
Parameters:
  VpcCidrBlock:
    Description: "CIDR block for VPC"
    Type: String
    Default: "10.0.0.0/16"

  CustomAMI:
    Description: "AMI build by packer from Amazon Linux"
    Type: String
    Default: "ami-060c73a937393992a"

  CidrBlock1:
    Type: String
    Default: "10.0.1.0/24"

  AZ1:
    Type: "String"
    Default: "us-east-1a"

  CidrBlock2:
    Type: String
    Default: "10.0.2.0/24"

  AZ2:
    Type: "String"
    Default: "us-east-1b"

  CidrBlock3:
    Type: String
    Default: "10.0.3.0/24"

  AZ3:
    Type: "String"
    Default: "us-east-1c"  

  RouteDestinationCidrBlock:
    Description: "Destination CidrBlock for route"
    Type: String
    Default: "0.0.0.0/0"

  CidrBlock4:
    Type: String
    Default: "10.0.4.0/24"

  CidrBlock5:
    Type: String
    Default: "10.0.5.0/24"

  CidrBlock6:
    Type: String
    Default: "10.0.6.0/24"

  SshKeyName:
    Description: "SSH key-pair for EC2 instance"
    Type: String
    Default: "csye6225"

  EnvironmentName:
    Description: "An environment name that is prefixed to resource names"
    Type: String
    Default: "dev"

  DBUsername:
    Type: String
    Default: "csye6225"

  DBUserPassword:
    Type: String
    Default: "CSYE_6225"

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: 'default'
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
    
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: "false"
      IamInstanceProfile: 
        Ref: ec2InstanceProfile
      ImageId: !Ref CustomAMI
      InstanceType: "t2.micro"
      KeyName: !Ref SshKeyName
      SubnetId:
        Ref: publicSubnet1
      SecurityGroupIds:
      - Ref: applicationSG
      BlockDeviceMappings: 
      - DeviceName: "/dev/xvda"
        Ebs: 
          VolumeType: "gp2"
          DeleteOnTermination: "true"
          VolumeSize: "20"
      UserData: 
        Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            cloud-init status --wait

            cat >csye/application.properties <<EOF
            amazon.s3.bucket-name=${!Sub csye6225.${EnvironmentName}.zhijie-li.me}

            ##Schema
            spring.jpa.hibernate.ddl-auto=update
            spring.jpa.show-sql=true

            ## RDS Config
            spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
            spring.datasource.username=${DBUsername}
            spring.datasource.password=${DBUserPassword}
            spring.datasource.url=${!GetAtt Endpoint.Address}:3306/csye6225?useSSL=false&allowPublicKeyRetrieval=true
            
            EOF

            ## Restart our service
            sudo systemctl enable application.service
            sudo systemctl start application.service

      Tags:
      - Key: Name
        Value: csye6225-EC2Instance

  ec2InstanceRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: "Allow application traffic into rds"
      # Policies: 
      #   - Ref: webAppS3Policy
      RoleName: EC2-CSYE6225

  ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: ec2InstanceProfile
      Roles: 
        - Ref: ec2InstanceRole

  webAppS3Policy:
    Type: AWS::IAM::Policy
    DependsOn: ec2InstanceRole
    Properties:
      PolicyName: webAppS3
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:GetObject'
              - 's3:PostObject'
              - 's3:DeleteObject'
            Effect: Allow
            Resource:  
              - 'arn:aws:s3:::${!Sub csye6225.${EnvironmentName}.zhijie-li.me}'
              - 'arn:aws:s3:::${!Sub csye6225.${EnvironmentName}.zhijie-li.me}/*'
      Roles: 
        - !Ref ec2InstanceRole
    
  publicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 
        !Ref CidrBlock1
      AvailabilityZone: !Ref AZ1
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: csye6225-subnet1

  publicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref CidrBlock2
      AvailabilityZone: !Ref AZ2
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: csye6225-subnet2

  publicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref CidrBlock3
      AvailabilityZone: !Ref AZ3
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: csye6225-subnet3
  
  privateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref CidrBlock4
      AvailabilityZone: !Ref AZ1
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: csye6225-private-subnet1
    
  privateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref CidrBlock5
      AvailabilityZone: !Ref AZ2
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: csye6225-private-subnet2

  privateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref CidrBlock6
      AvailabilityZone: !Ref AZ3
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: csye6225-private-subnet3

  publicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myVPC
      Tags:
      - Key: Name
        Value: csye6225-public-RouteTable

  privateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myVPC
      Tags:
      - Key: Name
        Value: csye6225-private-RouteTable

  publicRoute: 
    Type: AWS::EC2::Route
    DependsOn:
      - myVpcGatewayAttachment
      - myInternetGateway
    Properties:
      RouteTableId:
        Ref: publicRouteTable
      DestinationCidrBlock: !Ref RouteDestinationCidrBlock
      GatewayId:
        Ref: myInternetGateway

  publicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: publicSubnet1
      RouteTableId:
        Ref: publicRouteTable

  publicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: publicSubnet2
      RouteTableId:
        Ref: publicRouteTable

  publicSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: publicSubnet3
      RouteTableId:
        Ref: publicRouteTable  

  privateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: privateSubnet1
      RouteTableId:
        Ref: privateRouteTable

  privateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: privateSubnet2
      RouteTableId:
        Ref: privateRouteTable

  privateSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: privateSubnet3
      RouteTableId:
        Ref: privateRouteTable

  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: csye6225-ig-spring2022

  myVpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: myInternetGateway
      VpcId:
        Ref: myVPC

  applicationSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "SecurityGroup for EC2 instance"
      VpcId:
        Ref: myVPC
      GroupName: "application"

  httpIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "http"
      GroupId: 
        Ref: applicationSG
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  sshIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "ssh"
      GroupId: 
        Ref: applicationSG
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0

  httpsIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Https"
      GroupId: 
        Ref: applicationSG
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0

  webappIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "For Java app"
      GroupId: 
        Ref: applicationSG
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      CidrIp: 0.0.0.0/0

  sgEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: "Permit all"
      GroupId: 
        Ref: applicationSG
      IpProtocol: "-1"
      FromPort: 0
      ToPort: 0
      CidrIp: 0.0.0.0/0

  databaseSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "SecurityGroup for Database"
      VpcId:
        Ref: myVPC
      GroupName: "database"

  mysqlIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "mysql"
      GroupId: 
        Ref: databaseSG
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: 
        Ref: applicationSG

  s3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties: 
      AccessControl: Private
      BucketName: 
        !Sub csye6225.${EnvironmentName}.zhijie-li.me
      LifecycleConfiguration:
        Rules:
          - Id: STANDARD_IA_Rule
            Status: Enabled
            ExpirationInDays: 40
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
        
  rdsParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: "RDS of MySQL Parameter Group"
      Family: mysql8.0
    # Parameters:

  rdsInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: "csye6225"
      DBName: "csye6225"
      Engine: "mysql"
      DBInstanceClass: "db.t3.micro"
      DBParameterGroupName: 
        Ref: rdsParameterGroup
      AllocatedStorage: "10"
      PubliclyAccessible: false
      MultiAZ: false
      AvailabilityZone: 'us-east-1a'
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBUserPassword
      DBSubnetGroupName: 
        !Ref rdsSubnetGroup
      VPCSecurityGroups:
        - Ref: databaseSG

  rdsSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: "Private subnetGroup for RDS"
      DBSubnetGroupName: rdsSubnetGroup
      SubnetIds: 
        - Ref: privateSubnet1
        - Ref: privateSubnet2 
        - Ref: privateSubnet3


Outputs:
  VpcId:
    Description: The VPC Id
    Value: !Ref myVPC
  Ec2SubnetId:
    Description: Subnet Id for Ec2 instance
    Value: !Ref publicSubnet1 
  RdsSubnetId:
    Description: Subnet Id for Rds instance
    Value: !Ref privateSubnet1