Description: csye6225 Infrastructure as Code
Parameters:
  VpcCidrBlock:
    Description: "CIDR block for VPC"
    Type: String
    Default: "10.0.0.0/16"
  # VpcEnableDnsSupport:
  #   Type: String
  #   AllowedValues:
  #     - true
  #     - false
  #   Default: 'true'
  # VpcEnableDnsHostnames:
  #   Description: "Enable DNS hostname, and need DNS support as true"
  #   Type: String
  #   AllowedValues:
  #     - true
  #     - false
  #   Default: 'true'

  CustomAMI:
    Description: "AMI build by packer from Amazon Linux"
    Type: String
    Default: "ami-009bbe793b15c4aca"

  Subnet1CidrBlock:
    Description: "CIDR block for subnet1"
    Type: String
    Default: "10.0.1.0/24"

  Subnet1AZ:
    Description: "Subnet1 Availability Zone"
    Type: "String"
    Default: "us-east-1a"

  Subnet2CidrBlock:
    Description: "CIDR block for subnet2"
    Type: String
    Default: "10.0.2.0/24"

  Subnet2AZ:
    Description: "Subnet2 Availability Zone"
    Type: "String"
    Default: "us-east-1b"

  Subnet3CidrBlock:
    Description: "CIDR block for subnet3"
    Type: String
    Default: "10.0.3.0/24"

  Subnet3AZ:
    Description: "Subnet3 Availability Zone"
    Type: "String"
    Default: "us-east-1c"  

  RouteDestinationCidrBlock:
    Description: "Destination CidrBlock for route"
    Type: String
    Default: "0.0.0.0/0"

  SshKeyName:
    Description: "SSH key-pair for EC2 instance"
    Type: String
    Default: "csye6225"

  EnvironmentName:
    Description: "An environment name that is prefixed to resource names"
    Type: String
    Default: "dev"

  BucketName:
    Description: ""
    Type: String
    Default: !Sub csye6225.${EnvironmentName}.zhijie-li.me

  DBUsername:
    Type: String

  DBUserPassword:
    Type: String

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: 'default'
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

      
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: "false"
      IamInstanceProfile: 
        Ref: instanceProfile
      ImageId: !Ref CustomAMI
      InstanceType: "t2.micro"
      KeyName: !Ref SshKeyName
      SubnetId:
        Ref: publicSubnet1
      SecurityGroupIds:
      - Ref: application
      BlockDeviceMappings: 
      - DeviceName: "/dev/xvda"
        Ebs: 
          VolumeType: "gp2"
          DeleteOnTermination: "true"
          VolumeSize: "20"
      UserData: 
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            yum update -y #example command
            # linux command 
      Tags:
      - Key: Name
        Value: csye6225-EC2Instance

  EC2-CSYE6225:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: "Allow application traffic into rds"
      Policies: 
        - Ref: webAppS3Policy
      RoleName: EC2-CSYE6225
        # Tags: 
        #   - Tag

  instanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: instanceProfile
      Roles: 
        - Ref: EC2-CSYE6225
    
  publicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 
        !Ref Subnet1CidrBlock
      AvailabilityZone: !Ref Subnet1AZ
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: csye6225-subnet1

  publicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet2CidrBlock
      AvailabilityZone: !Ref Subnet2AZ
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: csye6225-subnet2

  publicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet3CidrBlock
      AvailabilityZone: !Ref Subnet3AZ
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: csye6225-subnet3
  
  privateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet1CidrBlock
      AvailabilityZone: !Ref Subnet1AZ
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: csye6225-private-subnet1
    
  privateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet2CidrBlock
      AvailabilityZone: !Ref Subnet2AZ
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: csye6225-private-subnet2

  privateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet3CidrBlock
      AvailabilityZone: !Ref Subnet3AZ
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: csye6225-private-subnet3

  publicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myVPC
      Tags:
      - Key: Name
        Value: csye6225-public-RouteTable

  privateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myVPC
      Tags:
      - Key: Name
        Value: csye6225-private-RouteTable

  publicRoute: 
    Type: AWS::EC2::Route
    DependsOn:
      - myVpcGatewayAttachment
      - myInternetGateway
    Properties:
      RouteTableId:
        Ref: publicRouteTable
      DestinationCidrBlock: !Ref RouteDestinationCidrBlock
      GatewayId:
        Ref: myInternetGateway

  privateRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - myVpcGatewayAttachment
      - myInternetGateway
    Properties:
      RouteTableId:
        Ref: privateRouteTable
      # DestinationCidrBlock: !Ref RouteDestinationCidrBlock
      GatewayId:
        Ref: myInternetGateway  

  publicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: publicSubnet1
      RouteTableId:
        Ref: publicRouteTable

  publicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: publicSubnet2
      RouteTableId:
        Ref: publicRouteTable

  publicSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: publicSubnet3
      RouteTableId:
        Ref: publicRouteTable  

  privateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: privateSubnet1
      RouteTableId:
        Ref: privateRouteTable

  privateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: privateSubnet2
      RouteTableId:
        Ref: privateRouteTable

  privateSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: privateSubnet3
      RouteTableId:
        Ref: privateRouteTable

  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: csye6225-ig-spring2022

  myVpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: myInternetGateway
      VpcId:
        Ref: myVPC

  application:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "SecurityGroup for EC2 instance"
      VpcId:
        Ref: myVPC #
      GroupName: "application"

  httpIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "http"
      GroupId: 
        Ref: application
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  sshIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "ssh"
      GroupId: 
        Ref: application
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0

  httpsIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Https"
      GroupId: 
        Ref: application
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0

  webappIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "For Java app"
      GroupId: 
        Ref: application
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      CidrIp: 0.0.0.0/0

  sgEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: "Permit all"
      GroupId: 
        Ref: application
      IpProtocol: "-1"
      FromPort: 0
      ToPort: 0
      CidrIp: 0.0.0.0/0

  database:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "SecurityGroup for Database"
      VpcId:
        Ref: myVPC
      GroupName: "database"

  mysqlIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "For mysql"
      GroupId: 
        Ref: database
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: 
        Ref: application

  s3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketEncryption: SSE-S3
      BucketName: 
        !Ref BucketName
      LifecycleConfiguration:
        Rules:
          - Id: STANDARD_IA_Rule
            Status: Enabled
            ExpirationInDays: 40
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
          

  webAppS3Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref s3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:Get*'
              - 's3:Post*'
              - 's3:Delete*'
            Effect: Allow
            Resource: !Sub
              - 'arn:aws:s3:::{BucketName}',
              - 'arn:aws:s3:::{BucketName}/*'

  encryptedS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
              KMSMasterKeyID: KMS-KEY-ARN
    DeletionPolicy: Delete

  rdsParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: "RDS of MySQL Parameter Group"
      Family: mysql5.7
    # Parameters:

  rdsInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: "csye6225"
      DBName: "csye6225"
      # !Ref DBName
      Engine: "mysql"
      DBInstanceClass: "db.t3.micro"
      DBParameterGroupName: 
        Ref: rdsParameterGroup
      AllocatedStorage: "10"
      PubliclyAccessible: false
      MultiAZ: false
      AvailabilityZone: 'us-east-1'
      MasterUsername: "csye6225"
      MasterUserPassword: ""
      DBSubnetGroupName: 
      VPCSecurityGroups:
        - Ref: database

Outputs:
  VpcId:
    Description: The VPC Id
    Value: !Ref myVPC
  Ec2SubnetId:
    Description: Subnet Id for Ec2 instance
    Value: !Ref publicSubnet1 
  RdsSubnetId:
    Description: Subnet Id for Rds instance
    Value: !Ref privateSubnet1