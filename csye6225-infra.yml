Description: csye6225 Infrastructure as Code
Parameters:
  VpcCidrBlock:
    Description: "CIDR block for VPC"
    Type: String
    Default: "10.0.0.0/16"
  VpcEnableDnsSupport:
    Type: String
    AllowedValues:
      - true
      - false
    Default: 'true'
  VpcEnableDnsHostnames:
    Description: "Enable DNS hostname, and need DNS support as true"
    Type: String
    AllowedValues:
      - true
      - false
    Default: 'true'

  CustomAMI:
    Description: "AMI build by packer from Amazon Linux"
    Type: String
    Default: "ami-009bbe793b15c4aca"

  Subnet1CidrBlock:
    Description: "CIDR block for subnet1"
    Type: String
    Default: "10.0.1.0/24"
  Subnet1AZ:
    Description: "Subnet1 Availability Zone"
    Type: "String"
    Default: "us-east-1a"
  Subnet2CidrBlock:
    Description: "CIDR block for subnet2"
    Type: String
    Default: "10.0.2.0/24"
  Subnet2AZ:
    Description: "Subnet2 Availability Zone"
    Type: "String"
    Default: "us-east-1b"  ##Todo change when in us-east-2
  Subnet3CidrBlock:
    Description: "CIDR block for subnet3"
    Type: String
    Default: "10.0.3.0/24"
  Subnet3AZ:
    Description: "Subnet3 Availability Zone"
    Type: "String"
    Default: "us-east-1c"  ##
  RouteDestinationCidrBlock:
    Description: "Destination CidrBlock for route"
    Type: String
    Default: "0.0.0.0/0"
  SshKeyName:
    Description: "SSH key-pair for EC2 instance"
    Type: String
    Default: "csye6225"

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: !Ref VpcEnableDnsSupport
      EnableDnsHostnames: !Ref VpcEnableDnsHostnames
      InstanceTenancy: 'default'
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  mySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 
        !Ref Subnet1CidrBlock
      AvailabilityZone: !Ref Subnet1AZ
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: csye6225-subnet1

    
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: "false"
      ImageId: !Ref CustomAMI
      InstanceType: "t2.micro"
      KeyName: !Ref SshKeyName
      SubnetId:
        Ref: mySubnet1
      SecurityGroupIds:
      - Ref: application
      # BlockDeviceMappings: 
      # - DeviceName: "/dev/xvda"
      #   Ebs: 
      #     VolumeType: "gp2"
      #     DeleteOnTermination: "true"
      #     VolumeSize: "20"
      Tags:
      - Key: Name
        Value: csye6225-EC2Instance

  mySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet2CidrBlock
      AvailabilityZone: !Ref Subnet2AZ
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: csye6225-subnet2

  mySubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet3CidrBlock
      AvailabilityZone: !Ref Subnet3AZ
      Tags:
      - Key: Name
        Value: csye6225-subnet3
  
  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myVPC
      Tags:
      - Key: Name
        Value: csye6225-RouteTable


  myRoute: 
    Type: AWS::EC2::Route
    DependsOn:
      - myVpcGatewayAttachment
      - myInternetGateway
    Properties:
      RouteTableId:
        Ref: myRouteTable
      DestinationCidrBlock: !Ref RouteDestinationCidrBlock
      GatewayId:
        Ref: myInternetGateway
      

  mySubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: mySubnet1
      RouteTableId:
        Ref: myRouteTable

  mySubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: mySubnet2
      RouteTableId:
        Ref: myRouteTable

  mySubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: mySubnet3
      RouteTableId:
        Ref: myRouteTable  

  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: csye6225-ig-spring2022

  myVpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: myInternetGateway
      VpcId:
        Ref: myVPC

  application:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "SecurityGroup for EC2 instance"
      VpcId:
        Ref: myVPC #
      GroupName: "application"

  HttpIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "http"
      GroupId: 
        Ref: application
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  SshIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "ssh"
      GroupId: 
        Ref: application
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0

  HttpsIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Https"
      GroupId: 
        Ref: application
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0

  WebappIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "For Java app"
      GroupId: 
        Ref: application
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      CidrIp: 0.0.0.0/0

  sgEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: "Permit all"
      GroupId: 
        Ref: application
      IpProtocol: "-1"
      FromPort: 0
      ToPort: 0
      CidrIp: 0.0.0.0/0


Outputs:
    VpcId:
      Description: The VPC Id
      Value: !Ref myVPC
    Subnet1Id:
      Description: mySubnet1 Id 
      Value: !Ref mySubnet1